//NotExpression
package src.domain.exp;

import src.domain.exception.MyException;
import src.domain.prgstate.MyHeap;
import src.domain.prgstate.MyIDictionary;
import src.domain.type.BoolType;
import src.domain.type.Type;
import src.domain.value.BoolValue;
import src.domain.value.Value;

public class NotExpression implements Exp {
    Exp expression;

    public NotExpression(Exp expression) {
        this.expression = expression;
    }

    @Override
    public Value eval(MyIDictionary<String, Value> symTbl, MyIDictionary<Integer, Value> heap) throws MyException {
        Value v1;
        v1 = expression.eval(symTbl, heap);
        if (v1.getType().equals(new BoolType())) {
            boolean firstBool = (boolean) v1.getVal();
            return new BoolValue(!firstBool);
        } else
            throw new MyException("The first operand is not a boolean!");
        //return null;
    }

    @Override
    public Type typeCheck(MyIDictionary<String, Type> typeEnv) throws MyException {
        Type type1 = expression.typeCheck(typeEnv);
        if (type1.equals(new BoolType()))
            return new BoolType();
        else
            throw new MyException("The first operand is not a boolean!");
    }

    @Override
    public String toString() {
        return "!" + expression.toString();
    }
}
