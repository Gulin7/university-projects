//For statement:
package src.domain.stmt;

import src.domain.exception.MyException;
import src.domain.exp.BooleanExp;
import src.domain.exp.Exp;
import src.domain.exp.LogicExp;
import src.domain.exp.VarExp;
import src.domain.prgstate.MyIDictionary;
import src.domain.prgstate.PrgState;
import src.domain.stmt.*;
import src.domain.type.IntType;
import src.domain.type.Type;

public class ForStmt implements IStmt {

    private final String var = "v";
    private final Exp exp1;
    private final Exp exp2;
    private final Exp exp3;

    private final IStmt stmt;

    public ForStmt(Exp exp1, Exp exp2, Exp exp3, IStmt stmt) {
        this.exp1 = exp1;
        this.exp2 = exp2;
        this.exp3 = exp3;
        this.stmt = stmt;
    }


    @Override
    public PrgState execute(PrgState state) throws MyException {
        IStmt compStmt = new CompStmt(new VarDeclStmt(var, new IntType()),
                                    new CompStmt(new AssignStmt("v", exp1),
                                            new WhileStmt(new BooleanExp(new VarExp(var), exp2, "<"),
                                                            new CompStmt(stmt, new AssignStmt(var, exp3)))));
        state.getStack().push(compStmt);
        return null;
    }

    @Override
    public MyIDictionary<String, Type> typeCheck(MyIDictionary<String, Type> typeEnv) throws MyException {
        typeEnv.add(var, new IntType());
        Type typeExp1 = exp1.typeCheck(typeEnv);
        Type typeExp2 = exp2.typeCheck(typeEnv);
        Type typeExp3 = exp3.typeCheck(typeEnv);
        typeEnv.remove(var);
        if (typeExp1.equals(new IntType()) && typeExp2.equals(new IntType()) && typeExp3.equals(new IntType())) {
            return typeEnv;
        }
        return null;
    }

    @Override
    public String toString() {
        return "(for(v=" + exp1.toString() + ";v<" + exp2.toString() + ";v=" + exp3.toString() + ") " + stmt.toString() + ")";
    }
}
