//Switch
package src.domain.stmt;

import src.domain.exception.MyException;
import src.domain.exp.BooleanExp;
import src.domain.exp.Exp;
import src.domain.prgstate.MyIDictionary;
import src.domain.prgstate.PrgState;
import src.domain.type.Type;

public class SwitchStmt implements IStmt{

    private final Exp exp;

    private final Exp exp1;

    private final Exp exp2;

    private final IStmt stmt1;

    private final IStmt stmt2;

    private final IStmt stmt3;

    public SwitchStmt(Exp exp, Exp exp1, Exp exp2, IStmt stmt1, IStmt stmt2, IStmt stmt3) {
        this.exp = exp;
        this.exp1 = exp1;
        this.exp2 = exp2;
        this.stmt1 = stmt1;
        this.stmt2 = stmt2;
        this.stmt3 = stmt3;
    }


    @Override
    public PrgState execute(PrgState state) throws MyException {
        IStmt newStmt = new IfStmt(new BooleanExp( exp, exp1, "=="), stmt1, new IfStmt(new BooleanExp(exp, exp2, "=="), stmt2, stmt3));
        state.getStack().push(newStmt);
        return null;
    }

    @Override
    public MyIDictionary<String, Type> typeCheck(MyIDictionary<String, Type> typeEnv) throws MyException {
        Type typExp = exp.typeCheck(typeEnv);
        Type typExp1 = exp1.typeCheck(typeEnv);
        Type typExp2 = exp2.typeCheck(typeEnv);
        if (typExp.equals(typExp1) && typExp.equals(typExp2)){
            stmt1.typeCheck(typeEnv.duplicate());
            stmt2.typeCheck(typeEnv.duplicate());
            stmt3.typeCheck(typeEnv.duplicate());
            return typeEnv;
        }
        else
            throw new MyException("Switch: different types");
    }

    @Override
    public String toString(){
        return "switch(" + exp.toString() + ") (case " + exp1.toString() + ": " + stmt1.toString() + ") (case " + exp2.toString() + ": " + stmt2.toString() + ") (default: " + stmt3.toString() + ")";
    }
}
