     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fwrite, fclose, fprintf              ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  import fopen msvcrt.dll
    11                                  import fwrite msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import fprintf msvcrt.dll
    14                                  
    15                                  ; our data is declared here (the variables needed by our program)
    16                                  segment data use32 class=data
    17                                      ; A file name and a text (defined in the data segment) are given. The text contains lowercase letters, uppercase letters, digits and special characters. Transform all the uppercase letters from the given text in
    18 00000000 70726F626C656D3434-         file_name db 'problem44lab8.txt',0
    18 00000009 6C6162382E74787400 
    19 00000012 7700                        write_mode db 'w',0
    20 00000014 <res 00000004>              file_descriptor resd 1
    21 00000018 7341204D4120535547-         text db 'sA MA SUGI DE pula nasm 69 fac cu mama ta!', 0 ; 5 uppercase letters, 7 lowercase, 2 digits, 1 special
    21 00000021 492044452070756C61-
    21 0000002A 206E61736D20363920-
    21 00000033 666163206375206D61-
    21 0000003C 6D612074612100     
    22                                      text_len equ $-text
    23 00000043 <res 00000045>              result resb 69
    24                                  
    25 00000088 257300                      format_for_file db '%s', 0
    26                                      ;'caca'
    27                                  ; our code starts here
    28                                  segment code use32 class=code
    29                                      start:
    30                                          ;OPEN FILE
    31 00000000 68[12000000]                    push dword write_mode
    32 00000005 68[00000000]                    push dword file_name
    33 0000000A FF15[00000000]                  call [fopen]
    34 00000010 83C408                          add esp, 4*2
    35                                          
    36 00000013 A3[14000000]                    mov [file_descriptor], eax
    37                                          
    38 00000018 BE[18000000]                    mov esi, text
    39 0000001D BF[43000000]                    mov edi, result
    40 00000022 B92B000000                      mov ecx, text_len
    41                                          loop.:
    42 00000027 AC                                  lodsb ; in AL we have the current byte
    43 00000028 3C41                                cmp al, 'A'
    44 0000002A 7206                                jb not_good
    45 0000002C 3C5A                                cmp al, 'Z'
    46 0000002E 7702                                ja not_good
    47 00000030 0420                                add al, 32
    48                                              not_good:
    49 00000032 AA                                  stosb
    50                                              ; we put it in result
    51 00000033 E2F2                            loop loop.
    52                                          ;NOW WE WRITE IN FILE
    53 00000035 68[43000000]                    push dword result
    54 0000003A 68[88000000]                    push dword format_for_file
    55 0000003F FF35[14000000]                  push dword [file_descriptor]
    56 00000045 FF15[00000000]                  call [fprintf]
    57 0000004B 83C40C                          add esp, 4*3
    58                                         
    59                                          ;CLOSE FILE
    60 0000004E FF35[14000000]                  push dword [file_descriptor]
    61 00000054 FF15[00000000]                  call [fclose]
    62 0000005A 83C404                          add esp, 4*1
    63                                      
    64                                          ; exit(0)
    65 0000005D 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    66 0000005F FF15[00000000]                  call    [exit]       ; call exit to terminate the program
