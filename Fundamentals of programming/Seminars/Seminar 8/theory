UI SERVICE REPOSITORY DOMAIN
-> Ui uses service
-> Service uses repository and domain
-> Repository uses domain
-> main file is outside all

REPOSITORY := CRUD OPERATIONS -> Create, Read, Update, Delete
-> Repository layer is an abstract way to access the data source (input, text file, database etc.)
Domain := entities from our application

------------------------------------------------------------------
General knowledge:
-> all __init__ should be private theoretically...
-> use the __str__ to change what's printed
-> you can define functions with double underscore as well
ex.: def __function(self, arg1, arg2, ...): ...
->
-------------------------------------------------------------------
domain.entities :
-> implement a create feature
-> Entity class:
    -> __init__ (attributes);
    -> you usually want to have an id
    -> you don't want to directly access the attributes, therefor we need to define getters and setters
    -> when u work with classes u have the possibility of hiding the attributes, prefixing the name with 2 underscores
    self.__id ...
    -> we call a function on an object like this: object_name.function(arguments)
    -> redefine the __str__ function ( when u print the object it actually prints the mem adress )
        -> make it return a string that will actually be printed when this function is called by python
--------------------------------------------------------------------
repository.expenses_repository:
-> Repository class:
    -> responsible with accessing our data source, the computer memory for now
    -> find, find_by_id; - the read
    -> save - the create
    -> remove - the delete
    -> update - the update
--------------------------------------------------------------------
service.expenses_service:
-> Service class:
    -> add an element
    -> get all the elements
--------------------------------------------------------------------
ui.console:
-> Console class:
    -> def __init__(self, service!): private!
    -> def run_console(self): this is the ui...

