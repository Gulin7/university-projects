                                        INSERT SORT

    The insert sort works by creating a subarray that is sorted inside the main array and then it will insert the first
unsorted item in the sorted part, where it belongs.
    With each iteration, the first 2, 3, 4 and so on elements are sorted, and the rest are not. Every new element's
position is found by going through the elements in the sorted part, from right to left ( biggest to lowest ).

    The best case scenario:
    O(n), when the list is already sorted: If the list is already sorted, insert sort will only go through the list once
and since all elements bigger than the previous ones, it won't do any other changes, just one comparison for each element,
therefor the complexity is O(n).

    The worst case scenario:
    O(n^2), when the list is sorted in reverse order: If the list is sorted in reverse order, for each element you will
make it's index number of comparisons and swaps.
    For the first element(index 0): no comparisons.
    For the second element(index 1): 1 comparison and therefor 1 swaps. ( it's smaller than the first so it has to switch)
    For the third element(index 2): 2 comparisons and 2 swaps.(it has to move 2 positions to the left, to be on index0,
since it's the smallest element so far)
    ...
    If you add up all the comparisons: 0+1+...+n-1 = n*(n-1)/2 = (n^2-n)/2 which is O(n^2) complexity.