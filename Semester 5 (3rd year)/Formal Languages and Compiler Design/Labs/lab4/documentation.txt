https://github.com/cs-ubbcluj-ro/lab-work-computer-science-2024-Gulin7

## Finite Automata Documentation

### 1. Alphabet:

a. Uppercase (A-Z) and lowercase (a-z) letters of the English alphabet

b. Underscore character `_`

c. Decimal digits (0-9)

### 2. Lexicon:

a. Special symbols, representing:

- **Operators**: `+`, `-`, `*`, `/`, `:=`, `<`, `<=`, `=`, `>=`
- **Separators**: `[`, `]`, `{`, `}`, `:`, `;`, `space`
- **Reserved words**:

  `array`, `char`, `const`, `do`, `else`, `if`, `int`, `of`, `program`, `read`, `then`, `var`, `while`, `write`

b. Identifiers:

identifier ::= letter {letter | digit}
letter ::= "A" | "B" | ... | "Z" | "a" | "b" | ... | "z" digit ::= "0" | "1" | ... | "9"

c. Constants:

noconst ::= "+" no | "-" no | no no ::= digit {digit}
character ::= 'letter' | 'digit'
constchar ::= "string" string ::= char {string} char ::= letter | digit

### 3. Syntax:

The words - predefined tokens are specified between `" "`. The syntactical rules are defined as follows:

#### a. Finite Automaton Definition:
FA=
M = {
Q = q0, q1, q2, q3, q4, q5, q6
E = _, a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, +, -, *, /
RO =
start
q0, _ -> q1
q1, [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z] -> q1
q0, [1, 2, 3, 4, 5, 6, 7, 8, 9] -> q5
q0, 0 -> q6
q0, [+, -] -> q4
q4, [1, 2, 3, 4, 5, 6, 7, 8, 9] -> q5
q5, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] -> q5
q0, [*, /] -> q3
q3, [a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z] -> q3
q3, [1, 2, 3, 4, 5, 6, 7, 8, 9] -> q3
end
q0 = q0
F = q1, q5, q6

M = {Q, E, RO, q0, F}

- The finite automaton is represented as:
where:
- `Q` is the set of states
- `E` is the alphabet (set of input symbols)
- `RO` is the set of transitions
- `q0` is the initial state
- `F` is the set of final states

#### b. Syntax Rules (File Format):

1. States:
Q ::= state {, state}

2. Alphabet:
E ::= symbol {, symbol}

3. Transitions:
transition ::= state, symbol -> state

4. Initial State:
q0 ::= state

5. Final States:
F ::= state {, state}

#### c. Transition Rules:

transitions ::= "start" state, symbol -> state ... "end"

#### d. Word Check Syntax:

1. Integer Constant Check:
check_word_if_integer_constant(word)

2. Identifier Check:
check_word_if_identifier(word)
--------------------------

<program>   ::= <identifier> | <integer>

<identifier> ::= "_" <letter> { <letter> }
<letter>     ::= "a" | "b" | "c" | "d" | "e" | "f" | "g" | "h" | "i" | "j" | "k" | "l" | "m" | "n" | "o" | "p" | "q" | "r" | "s" | "t" | "u" | "v" | "w" | "x" | "y" | "z"

<integer>    ::= <signed-integer> | "0"
<signed-integer> ::= [ "+" | "-" ] <non-zero-digit> { <digit> }
<non-zero-digit> ::= "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"
<digit>      ::= "0" | <non-zero-digit>
