     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ;7: Two byte string S1 and S2 are given, having the same length. Obtain the string D by intercalating the elements of the two strings.
    14                                      ;S1: 1, 3, 5, 7
    15                                      ;S2: 2, 6, 9, 4
    16                                      ;D: 1, 2, 3, 6, 5, 9, 7, 4
    17 00000000 01030507                    s1 db 1,3,5,7
    18 00000004 02060904                    s2 db 2,6,9,4
    19                                      e equ $-s2 ; e is the length of one set
    20 00000008 <res 00000008>              d resb e*2 ; we reserve enough bytes to store the intercalating sets
    21                                  
    22                                  ; our code starts here
    23                                  segment code use32 class=code
    24                                      start:
    25 00000000 B904000000                      mov ecx, e
    26 00000005 E324                            jecxz out
    27 00000007 BE00000000                      mov esi, 0 ; starting the i from 0
    28                                          repeat:
    29 0000000C BA[00000000]                    mov edx, s1
    30 00000011 8A0432                          mov al, [edx+esi]
    31 00000014 BA[04000000]                    mov edx, s2
    32 00000019 8A1C32                          mov bl, [edx+esi]
    33 0000001C BA[08000000]                    mov edx, d
    34 00000021 880472                          mov [edx+esi*2], al
    35 00000024 885C7201                        mov [edx+esi*2+1], bl
    36 00000028 46                              inc esi
    37 00000029 E2E1                            loop repeat
    38                                          out:
    39                                          
    40                                          ; exit(0)
    41 0000002B 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    42 0000002D FF15[00000000]                  call    [exit]       ; call exit to terminate the program
