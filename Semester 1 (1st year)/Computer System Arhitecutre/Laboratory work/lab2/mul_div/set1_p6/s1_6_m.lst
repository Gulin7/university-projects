     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a,b,c - byte, d - word
    14 00000000 04                          a db 4
    15 00000001 03                          b db 3
    16 00000002 02                          c db 2
    17 00000003 0100                        d dw 1
    18                                  
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; [2*(a+b)-5*c]*(d-3)
    23                                          ; a=4, b=3, c=2, d=1 the result is: (2*7-5*2)*(-2)=4*(-2)=-8
    24 00000000 8A1D[00000000]                  mov BL,byte[a]
    25 00000006 021D[01000000]                  add BL, byte[b]
    26 0000000C B002                            mov AL,2 ; we store 2 in AL so we can multiply it with (a+b)
    27 0000000E F6E3                            mul BL ; in AX we will have the result of 2*(a+b) = 2*7=14
    28 00000010 6689C3                          mov BX, AX ; we store 2*(a+b) in BX
    29 00000013 B005                            mov AL,5
    30 00000015 8A0D[02000000]                  mov CL,byte[c]
    31 0000001B F6E1                            mul CL ; in AX we now have 5*c=10
    32 0000001D 6629C3                          sub BX,AX ; in BX we will have the result of [2*(a+b)-5*c]
    33 00000020 66A1[03000000]                  mov AX,word[d]
    34 00000026 6683E803                        sub AX,3 ; we put in AX: d-3
    35 0000002A 66BA0000                        mov DX,0 ; we put 0 in DX so it's empty for the next multiplication that's done with words
    36 0000002E 66F7E3                          mul BX ; we multiply BX with AX and we have the result on DX:AX
    37                                          
    38                                      
    39                                      
    40                                          ; exit(0)
    41 00000031 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    42 00000033 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
