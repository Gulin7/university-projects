     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit, fopen, fclose, fread, fprintf, printf               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  extern fopen, fclose, fread, fprintf, printf
    11                                  import fopen msvcrt.dll
    12                                  import fclose msvcrt.dll
    13                                  import fread msvcrt.dll
    14                                  import fprintf msvcrt.dll
    15                                  import printf msvcrt.dll
    16                                                            
    17                                  ; our data is declared here (the variables needed by our program)
    18                                  segment data use32 class=data
    19                                      ; A text file is given. Read the content of the file, count the number of odd digits and display the result on the screen. The name of text file is defined in the data segment.
    20 00000000 70726F626C656D3334-         file_name db "problem34lab8.txt",0
    20 00000009 6C6162382E74787400 
    21 00000012 7200                        access_mode db "r", 0
    22 00000014 <res 00000004>              file_descriptor resd 1
    23 00000018 00000000                    no_odd_digits dd 0
    24 0000001C 00                          digit db 0
    25 0000001D 546865206E756D6265-         format db "The number of odd digits is: %d", 0
    25 00000026 72206F66206F646420-
    25 0000002F 646967697473206973-
    25 00000038 3A20256400         
    26 0000003D 257300                      format_for_test db "%s", 0
    27                                  
    28                                  ; our code starts here
    29                                  segment code use32 class=code
    30                                      start:
    31 00000000 68[12000000]                    push dword access_mode
    32 00000005 68[00000000]                    push dword file_name
    33 0000000A FF15[00000000]                  call [fopen]
    34 00000010 83C408                          add esp, 4*2
    35 00000013 83F800                          cmp eax, 0
    36                                          ;jne enddd
    37                                          ;push dword "It didn't work"
    38                                          ;push dword format_for_test
    39                                          ;call [printf]
    40                                          ;add esp,4*2
    41                                          ;enddd:
    42                                          
    43 00000016 A3[14000000]                    mov [file_descriptor], eax ; in eax we have the file descriptor
    44 0000001B B901000000                      mov ecx, 1
    45                                          
    46                                          loop.:
    47 00000020 FF35[14000000]                  push dword [file_descriptor]
    48 00000026 6A01                            push dword 1
    49 00000028 6A01                            push dword 1
    50 0000002A 68[1C000000]                    push dword digit
    51 0000002F FF15[00000000]                  call [fread]
    52 00000035 83C410                          add esp, 4*4
    53 00000038 83F800                          cmp eax, 0
    54 0000003B 7419                            je end   
    55 0000003D 8025[1C000000]01                and byte [digit], 01h
    56 00000044 803D[1C000000]00                cmp byte [digit], 0
    57 0000004B 7407                            je not_odd
    58 0000004D 8005[18000000]01                add byte [no_odd_digits], 1
    59                                          not_odd:
    60 00000054 E2CA                            loop loop.
    61                                          end:
    62                                          
    63                                          
    64 00000056 FF35[18000000]                  push dword [no_odd_digits]
    65 0000005C 68[1D000000]                    push dword format
    66 00000061 FF15[00000000]                  call [printf]
    67 00000067 83C408                          add esp, 4*2
    68                                          
    69 0000006A A0[18000000]                    mov al, [no_odd_digits]
    70                                          
    71 0000006F FF35[14000000]                  push dword [file_descriptor]
    72 00000075 FF15[00000000]                  call [fclose]
    73 0000007B 83C404                          add esp, 4*1
    74                                          ; exit(0)
    75 0000007E 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    76 00000080 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
