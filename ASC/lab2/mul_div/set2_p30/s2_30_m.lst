     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a,b,c,d-byte, e,f,g,h-word    
    14 00000000 05                          a db 5
    15 00000001 1400                        e dw 20
    16 00000003 1300                        h dw 19
    17                                  
    18                                  ; our code starts here
    19                                  segment code use32 class=code
    20                                      start:
    21                                          ; mul/div set2 30: 100/(e+h-3*a)
    22                                          ; a=5, e=20, h=19 the result is 100/(40-15)=100/24=4,remainder 4 
    23                                          ; so AX=4, DX=4
    24 00000000 B003                            mov AL,3
    25 00000002 8A1D[00000000]                  mov bl,byte[a]
    26 00000008 F6E3                            mul bl ; in AX we have 3*a 
    27 0000000A 668B1D[01000000]                mov BX, word[e]
    28 00000011 66031D[03000000]                add BX, word[h]
    29 00000018 6629C3                          sub BX,AX
    30 0000001B 6689D9                          mov CX,BX ; we move BX to CX so we can divide
    31 0000001E 66BA0000                        mov DX,0
    32 00000022 66B86400                        mov AX,100
    33 00000026 66F7F1                          div CX
    34                                      
    35                                          ; exit(0)
    36 00000029 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    37 0000002B FF15[00000000]                  call    [exit]       ; call exit to terminate the program
