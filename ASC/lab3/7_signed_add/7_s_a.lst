     1                                  bits 32 ; assembling for the 32 bits architecture
     2                                  
     3                                  ; declare the EntryPoint (a label defining the very first instruction of the program)
     4                                  global start        
     5                                  
     6                                  ; declare external functions needed by our program
     7                                  extern exit               ; tell nasm that exit exists even if we won't be defining it
     8                                  import exit msvcrt.dll    ; exit is a function that ends the calling process. It is defined in msvcrt.dll
     9                                                            ; msvcrt.dll contains exit, printf and all the other important C-runtime specific functions
    10                                  
    11                                  ; our data is declared here (the variables needed by our program)
    12                                  segment data use32 class=data
    13                                      ; a - byte, b - word, c - double word, d - qword - Signed representation
    14 00000000 FE                          a db -2
    15 00000001 D6FF                        b dw -42
    16 00000003 C2010000                    c dd 450
    17 00000007 14FCFFFFFFFFFFFF            d dq -1004
    18                                      
    19                                  ; our code starts here
    20                                  segment code use32 class=code
    21                                      start:
    22                                          ; (c+c+c)-b+(d-a)
    23                                          ; c=450, b=-42, d=-1004, a=-2 =>1350+42-1002 = 1392-1002=390
    24 00000000 8B1D[03000000]                  mov EBX,[c]
    25 00000006 031D[03000000]                  add EBX, [c]
    26 0000000C 031D[03000000]                  add EBX, [c] ; EBX = c+c+c
    27 00000012 66A1[01000000]                  mov ax, [b]
    28 00000018 98                              cwde ; EAX=b 
    29 00000019 29C3                            sub EBX,EAX ; ebx= (c+c+c)-b 
    30 0000001B A0[00000000]                    mov al, [a]
    31 00000020 6698                            cbw ; ax=a
    32 00000022 98                              cwde ;eax=a
    33 00000023 99                              cdq ; in EDX:EAX we have a 
    34 00000024 2905[07000000]                  sub dword[d],eax
    35 0000002A 1915[0B000000]                  sbb dword[d+4],edx ; in d we have d-a
    36 00000030 89D8                            mov EAX,EBX
    37 00000032 99                              cdq ; in edx:eax we have c+c+c-b 
    38 00000033 0305[07000000]                  add eax,dword[d]
    39 00000039 1315[0B000000]                  adc edx, dword[d+4] ; final result is in edx:eax 
    40                                          
    41                                          ; exit(0)
    42 0000003F 6A00                            push    dword 0      ; push the parameter for exit onto the stack
    43 00000041 FF15[00000000]                  call    [exit]       ; call exit to terminate the program
